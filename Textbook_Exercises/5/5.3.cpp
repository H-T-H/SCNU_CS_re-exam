/*
3．在公元前3世纪，古希腊天文学家埃拉托色尼发现了一种找出不大于n的所有自然数中的素数
的算法，即埃拉托色尼筛选法。这种算法首先需要按顺序写出2～n中所有的数。以n＝20为例：
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
然后把第一个元素画圈，表示它是素数，然后依次对后续元素进行如下操作：如果后面的元
素是画圈元素的倍数，就画×，表示该数不是素数。在执行完第一步后，会得到素数2，而所
有是2的倍数的数将全被画掉，因为它们肯定不是素数。接下来，只需要重复上述操作，把第
一个既没有被圈又没有画×的元素圈起来，然后把后续的是它的倍数的数全部画×。本例中
这次操作将得到素数3，而所有是3的倍数的数都被去掉。依次类推，最后数组中所有的元素
不是画圈就是画×。所有被圈起来的元素均是素数，而所有画×的元素均是合数。编写一个
程序实现埃拉托色尼筛选法，筛选范围是2～1000。
*/
#include<iostream>
#include<vector>
using namespace std;

int main()
{
    //初始化数组
    vector<int> nums;
    vector<bool> tag;
    for(int i = 2;i<=1000;i++)
    {
        nums.push_back(i);
        tag.push_back(true);
    }
    //做标记
    for(int i = 0;i< 999;i++)
    {
        while(tag[i] == false)
        {
            i++;
        }
        if(i>=999)
        {
            break;
        }
        for(int j = i+1;j < 999;j++)
        {
            if(nums[j]%nums[i] == 0)
            {
                tag[j] = false;
            }
        }
    }
    //输出
    for(int i = 0;i < 999;i++)
    {
        if(tag[i])
        {
            cout<<nums[i]<<endl;
        }
    }
}